//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MUSICART_APP
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MusicArtEntities12 : DbContext
    {
        public MusicArtEntities12()
            : base("name=MusicArtEntities12")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<CardDetail> CardDetails { get; set; }
        public virtual DbSet<Song> Songs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AccountView> AccountViews { get; set; }
        public virtual DbSet<ArtistView> ArtistViews { get; set; }
        public virtual DbSet<MyLibrary> MyLibraries { get; set; }
        public virtual DbSet<SongView> SongViews { get; set; }
    
        public virtual int BuySong(Nullable<int> sender, string song, Nullable<decimal> price)
        {
            var senderParameter = sender.HasValue ?
                new ObjectParameter("sender", sender) :
                new ObjectParameter("sender", typeof(int));
    
            var songParameter = song != null ?
                new ObjectParameter("Song", song) :
                new ObjectParameter("Song", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BuySong", senderParameter, songParameter, priceParameter);
        }
    
        public virtual int PaySubscription(Nullable<int> sender, Nullable<int> recipient, string plan)
        {
            var senderParameter = sender.HasValue ?
                new ObjectParameter("sender", sender) :
                new ObjectParameter("sender", typeof(int));
    
            var recipientParameter = recipient.HasValue ?
                new ObjectParameter("recipient", recipient) :
                new ObjectParameter("recipient", typeof(int));
    
            var planParameter = plan != null ?
                new ObjectParameter("Plan", plan) :
                new ObjectParameter("Plan", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaySubscription", senderParameter, recipientParameter, planParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int uspAddCard(Nullable<int> accID, Nullable<int> cardNumber, Nullable<int> cVV, string cardType)
        {
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(int));
    
            var cVVParameter = cVV.HasValue ?
                new ObjectParameter("CVV", cVV) :
                new ObjectParameter("CVV", typeof(int));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddCard", accIDParameter, cardNumberParameter, cVVParameter, cardTypeParameter);
        }
    
        public virtual int uspChangePass(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangePass", emailParameter, passwordParameter);
        }
    
        public virtual int uspCreateAccount(string firstName, string lastName, string email, string userName, string password)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateAccount", firstNameParameter, lastNameParameter, emailParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteAlbum(string albumID)
        {
            var albumIDParameter = albumID != null ?
                new ObjectParameter("AlbumID", albumID) :
                new ObjectParameter("AlbumID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteAlbum", albumIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteMusic(string songID)
        {
            var songIDParameter = songID != null ?
                new ObjectParameter("SongID", songID) :
                new ObjectParameter("SongID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteMusic", songIDParameter);
        }
    
        public virtual ObjectResult<uspGetAlbum_Result> uspGetAlbum()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAlbum_Result>("uspGetAlbum");
        }
    
        public virtual ObjectResult<uspGetAlbumID_Result> uspGetAlbumID(string albumName)
        {
            var albumNameParameter = albumName != null ?
                new ObjectParameter("AlbumName", albumName) :
                new ObjectParameter("AlbumName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAlbumID_Result>("uspGetAlbumID", albumNameParameter);
        }
    
        public virtual ObjectResult<uspGetAlbumName_Result> uspGetAlbumName(string searchAlbum)
        {
            var searchAlbumParameter = searchAlbum != null ?
                new ObjectParameter("searchAlbum", searchAlbum) :
                new ObjectParameter("searchAlbum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAlbumName_Result>("uspGetAlbumName", searchAlbumParameter);
        }
    
        public virtual ObjectResult<uspGetSongID_Result> uspGetSongID(string song)
        {
            var songParameter = song != null ?
                new ObjectParameter("Song", song) :
                new ObjectParameter("Song", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSongID_Result>("uspGetSongID", songParameter);
        }
    
        public virtual ObjectResult<uspGetSongName_Result> uspGetSongName(string searchSong)
        {
            var searchSongParameter = searchSong != null ?
                new ObjectParameter("searchSong", searchSong) :
                new ObjectParameter("searchSong", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSongName_Result>("uspGetSongName", searchSongParameter);
        }
    
        public virtual ObjectResult<uspGetSongs_Result> uspGetSongs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSongs_Result>("uspGetSongs");
        }
    
        public virtual ObjectResult<uspUpdateAlbum_Result> uspUpdateAlbum(Nullable<int> albumID, string albumTitle)
        {
            var albumIDParameter = albumID.HasValue ?
                new ObjectParameter("AlbumID", albumID) :
                new ObjectParameter("AlbumID", typeof(int));
    
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("AlbumTitle", albumTitle) :
                new ObjectParameter("AlbumTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdateAlbum_Result>("uspUpdateAlbum", albumIDParameter, albumTitleParameter);
        }
    
        public virtual ObjectResult<uspUploadAlbum_Result> uspUploadAlbum(string albumTitle)
        {
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("AlbumTitle", albumTitle) :
                new ObjectParameter("AlbumTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUploadAlbum_Result>("uspUploadAlbum", albumTitleParameter);
        }
    
        public virtual int uspUploadSong(string song, string title, Nullable<int> album, string genre, Nullable<System.DateTime> releaseDate, Nullable<decimal> price)
        {
            var songParameter = song != null ?
                new ObjectParameter("Song", song) :
                new ObjectParameter("Song", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var albumParameter = album.HasValue ?
                new ObjectParameter("Album", album) :
                new ObjectParameter("Album", typeof(int));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            var releaseDateParameter = releaseDate.HasValue ?
                new ObjectParameter("ReleaseDate", releaseDate) :
                new ObjectParameter("ReleaseDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUploadSong", songParameter, titleParameter, albumParameter, genreParameter, releaseDateParameter, priceParameter);
        }
    }
}
